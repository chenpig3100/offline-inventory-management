## Please install packages below before develop ##
npm install
npx expo install axios
npx expo install expo-sqlite
npx expo install @react-native-async-storage/async-storage

## For the txt output and share
npx expo install expo-file-system
npx expo install expo-sharing

## Additional install (Shane)
npm install @react-native-community/netinfo
npx expo install expo-image-picker
npm install react-native-dropdown-picker
npx expo install react-native-gesture-handler react-native-reanimated

## Publish
npm install -g eas-cli
npx expo login (if needed)
npx eas update --branch preview

(if needed)
npx eas update:configure
npx eas update --branch preview

(after each update)
npx eas update --branch preview

## Mock server function
## In order to check whether the server receives the API information and pictures.
## Commented out — remove the comment if necessary.
## InventoryView.js


## How to open up mock server

## 1. Create a Project Folder
## Open your terminal or Command Prompt:
mkdir inventoryServer
cd inventoryServer
## 2. Initialize a Node.js Project
npm init -y
## 3. Install Required Packages
npm install express multer cors
## 4. Create the Server File server.js
## Inside the inventoryServer folder, create a file named server.js with the following content:
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const fs = require('fs');
const app = express();

app.use(cors());
app.use(express.json());

// Set up storage for uploaded images
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, 'uploads/'),
  filename: (req, file, cb) => cb(null, Date.now() + '-' + file.originalname)
});
const upload = multer({ storage });

// Ensure the uploads folder exists
if (!fs.existsSync('uploads')) {
  fs.mkdirSync('uploads');
}

// Handle image upload
app.post('/upload', upload.single('image'), (req, res) => {
  const fileUrl = `http://${getIPAddress()}:5000/uploads/${req.file.filename}`;
  res.json({ url: fileUrl });
});

// Mock product storage
let products = [];

app.post('/products', (req, res) => {
  const product = { id: Date.now(), ...req.body };
  products.push(product);
  res.json(product);
});

app.get('/products', (req, res) => {
  res.json(products);
});

// Serve uploaded images
app.use('/uploads', express.static('uploads'));

// Start the server
const PORT = 5000;
app.listen(PORT, () => {
  console.log(`✅ Server running at http://${getIPAddress()}:${PORT}`);
});

// Helper to get local network IP
function getIPAddress() {
  const os = require('os');
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      if (iface.family === 'IPv4' && !iface.internal) {
        return iface.address;
      }
    }
  }
}

## 5. Start the Server
## In your terminal, run:
cd (The place you store server)
## For example,
## cd C:\Users\User\Desktop\inventoryServer
## and
node server.js

## You should see:
Server running at http://192.168.x.x:5000

## 6. Test Your API Endpoints
## Fill with your own IP address
Upload image	 : http://192.168.x.x:5000/upload
View image	     : http://192.168.x.x:5000/uploads/image.jpg
Upload product	 : http://192.168.x.x:5000/products
Get product list :http://192.168.x.x:5000/products